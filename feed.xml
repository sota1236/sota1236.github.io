<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-10-23T22:43:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>* node.jsで標準出力に色をつける</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/10/23/23224314.html"/>
    <id>http://blog.url.com/blog/2014/10/23/23224314.html</id>
    <published>2014-10-23T22:43:00+09:00</published>
    <updated>2014-10-29T17:57:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近、node.jsをひいひい言いながら書いてるのだがプログラムの実行過程が知りたくて&lt;code&gt;console.log&lt;/code&gt;する時、色をつけたかったので調べた。&lt;/p&gt;

&lt;p&gt;すると、こんな便利な&lt;code&gt;npm&lt;/code&gt;があるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a title="npm - colors" href="https://www.npmjs.org/package/colors"&gt;npm - colors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こう書くと&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.gyazo.com/a596b7f9f2c788243952593c5e8ff00f.png" alt="pic" /&gt;&lt;/p&gt;

&lt;p&gt;こうなる&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.gyazo.com/a92e7010abd5a061e283460127fe9345.png" alt="pic" /&gt;&lt;/p&gt;

&lt;p&gt;これでエラーの出力とか便利になった。&lt;/p&gt;

&lt;p&gt;ちなみに以下のサイトさんに教えていただきました。&lt;/p&gt;

&lt;p&gt;&lt;a title="Smashing Node.js に書いてあるEffective Node.jsなこと(第二弾)" href="http://yosuke-furukawa.hatenablog.com/entry/2012/11/09/021719"&gt;Smashing Node.js に書いてあるEffective Node.jsなこと(第二弾)&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>* OS X 10.9をクリーンインストールした後に行ったこと</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/10/07/07094511.html"/>
    <id>http://blog.url.com/blog/2014/10/07/07094511.html</id>
    <published>2014-10-07T09:45:00+09:00</published>
    <updated>2014-10-29T17:57:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;OS X 10.8から10.9にアップデートしたのだが、zshの一部の機能がエラーを吐いたり、brew doctorがいつまでたってもバグ吐いたりgemコマンドが使えなかったりとRuby周りがカオスだったりでめんどくさかったのでMavericksをクリーンインストールした。&lt;/p&gt;

&lt;p&gt;その後に行ったことを自分用にメモ&lt;/p&gt;

&lt;p&gt;1.アプリをインストール&lt;/p&gt;

&lt;p&gt;愛用してた以下のアプリケーションをインストール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開発系&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Google Chrome(常用、Googleアカウント様々)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fire Fox (開発用)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mou(Markdownエディタ)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sublime Text 2(言わずと知れたエディタ)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iTerm2(軽量シェル)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wireshark(パケットキャプチャ等)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dash(ドキュメントリーダー)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xcode(ユーザではないがCommand line toolsが欲しい for Homebrew)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;日々充実系&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alfred(Mac生活)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pocket(記事購読用)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VLC(動画再生ソフト)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gyazo(スクショ用)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wake up time(目覚まし、寝坊するので・・・)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppCleaner&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;コミュニケーション系&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slack(ゼミのチャット用)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;夜フクロウ(Twitter)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;音楽系&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CocoaPiano(ピッチ違うけどまぁ参考程度に)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MuseScore (無料楽譜作成ソフト)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CUI環境を整備&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここはかなり丁寧にやった(気がする)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bashの脆弱性、Shellshock対策&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テストコマンドを打ったところ、脆弱性があったので改善する(最新のイメージが修正されてないんか・・・)。&lt;/p&gt;

&lt;p&gt;以下のWebサイトで修正バッチをダウンロード、実行しておk&lt;/p&gt;

&lt;p&gt;http://support.apple.com/kb/DL1769&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Colore Scheme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちまたではSolarizedが流行ってるみたいだけど僕はSmyckを入れます&lt;/p&gt;

&lt;p&gt;http://color.smyck.org/&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Homebrewを入れる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;言わずと知れたパッケージマネージャ。&lt;/p&gt;

&lt;p&gt;これなきゃ生きていけない&lt;/p&gt;

&lt;p&gt;http://brew.sh/&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”&lt;/pre&gt;

&lt;p&gt;んで、思いつく限りの使ってたコマンドを入れた&lt;/p&gt;

&lt;p&gt;wget
zsh
git
gist
youtube-dl
nicovideo-dl
sl
vim&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew doctor&lt;/code&gt;するとエラーが出る&lt;/p&gt;

&lt;p&gt;既存のモジュールが優先されるからインストールしたやつ使えねーよ！って感じらしいのでzsh入れた後にパスを追加する&lt;/p&gt;

&lt;p&gt;さぁ、ここからいろいろと整えていきたい&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ゼミの先輩のタレを分けていただくか、自分で書くかという選択肢もあったが今後ゆっくりやろうってことで無難にOh-my-zsh&lt;/p&gt;

&lt;p&gt;&lt;a title="Oh-my-zsh" href="https://github.com/robbyrussell/oh-my-zsh"&gt;Oh-my-zsh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;テーマは&lt;code&gt;wedisagree&lt;/code&gt;にした&lt;/p&gt;

&lt;p&gt;あと前回はオレオレaliasを大量に.zshrcに書き込んでいたが、oh-my-zsh周りをいじるのはちょっとアレだなと思ったので外部ファイルにして、.zshrcで呼び出すことにした。&lt;/p&gt;

&lt;p&gt;&lt;a title="blog.paz-para.com:シェルスクリプトで外部ファイルを読み込む" href="http://blog.paz-para.com/?p=1881"&gt;blog.paz-para.com:シェルスクリプトで外部ファイルを読み込む&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VPSとかGitHubのためにssh周りの設定&lt;/p&gt;

&lt;p&gt;案の定忘れてたのでggりながら…&lt;/p&gt;

&lt;p&gt;クリーンインストールする前、GitHubだけつながらなくなってたのでそれだけ設定&lt;/p&gt;

&lt;p&gt;&lt;a title="Qiita:ターミナルからgithubのリポジトリにアクセスする設定(sshの設定)" href="http://qiita.com/pakiln/items/bd89ef5cc148a5349964"&gt;Qiita:ターミナルからgithubのリポジトリにアクセスする設定(sshの設定)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ほかのはバックアップからコピーでおk&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;emacsを触ったことがないので戦争はしないけどVimずっと触ってたのでVim好きです&lt;/p&gt;

&lt;p&gt;このままだとしごくコードが書きづらいので適当にvimrcを探す&lt;/p&gt;

&lt;p&gt;リポジトリ検索をしてよさげなやつを導入&lt;/p&gt;

&lt;p&gt;&lt;a title="GitHub:amix/vimrc" href="https://github.com/amix/vimrc"&gt;GitHub:amix/vimrc&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ホームディレクトリに.gitconfigを作成&lt;/p&gt;

&lt;p&gt;以下を参考にした&lt;/p&gt;

&lt;p&gt;&lt;a title="ゆるよろ日記:.gitconfigに設定してるaliasなどのまとめ" href="http://yuroyoro.hatenablog.com/entry/20101008/1286531851"&gt;ゆるよろ日記:.gitconfigに設定してるaliasなどのまとめ&lt;/a&gt;
&lt;a title="GitHub:geta6/dotfiles" href="https://github.com/geta6/dotfiles"&gt;GitHub:geta6/dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前回はbrewで入れてたけど、今回はバージョン管理できるnvmを使ってみる&lt;/p&gt;

&lt;p&gt;&lt;a title="GitHub:creationix/nvm" href="https://github.com/creationix/nvm"&gt;GitHub:creationix/nvm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっと調べた感じ不具合はなさそうなので、問題なければこれで管理していくかなー&lt;/p&gt;

&lt;p&gt;とりあえず以下のコマンドを実行&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;git clone https://github.com/creationix/nvm.git ~/.nvm &amp;amp;&amp;amp; cd ~/.nvm &amp;amp;&amp;amp; git checkout `git describe --abbrev=0 --tags`&lt;/pre&gt;

&lt;p&gt;そして.zshrcに以下を追加&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;source ~/.nvm/nvm.sh&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nvm ls-remote&lt;/code&gt;でダウンロードできるバージョンを指定できるので、とりあえず安定版v0.10.32をダウンロード&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;nvm install v0.10.32&lt;/pre&gt;

&lt;p&gt;そして普段使うものもこのバージョンに指定&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;nvm alias default v0.10.32&lt;/pre&gt;

&lt;p&gt;うん、快適&lt;/p&gt;

&lt;p&gt;以下を参考にしました&lt;/p&gt;

&lt;p&gt;&lt;a title="もろず blog:nvm を利用したnode.js のインストール" href="http://moro-archive.hatenablog.com/entry/2014/03/01/213314"&gt;もろず blog:nvm を利用したnode.js のインストール&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;問題のRuby&lt;/p&gt;

&lt;p&gt;前回と同じくrbenvを使います&lt;/p&gt;

&lt;p&gt;brewを使ってrbenv, ruby-buildを入れる&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;brew install rbenv ruby-builde&lt;/pre&gt;

&lt;p&gt;後にrbenvを使ってrubyをインストール&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;rbenv install 2.1.2
rbenv global 2.1.2
rbenv rehash&lt;/pre&gt;

これでおk

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;ruby -v
ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin13]
&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とくにPythonを使って大層なプログラムを書くこともなかったのでbrewに甘んじてたのだが、せっかくなのでバージョン管理する&lt;/p&gt;

&lt;p&gt;どうやら&lt;code&gt;pyenv&lt;/code&gt;というものがあるらしい&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;brew install pyenv&lt;/pre&gt;

&lt;p&gt;して.zshrcに以下を追記する&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;eval &amp;quot;$(pyenv init -)&amp;quot;&lt;/pre&gt;

&lt;p&gt;あとはインストールしたいやつをインストール！&lt;/p&gt;

&lt;pre class="brush: shell; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;pyenv install 3.4.1
pyenv install 2.7.8
pyenv global 3.4.1&lt;/pre&gt;

&lt;p&gt;以下を参考にさせていただきました&lt;/p&gt;

&lt;p&gt;&lt;a title="pixyzehn blog:MavericksでPythonのバージョン管理pyenvの設定をしてシステムではなくpyenvのPythonを使う" href="http://rikei-webmemo.hateblo.jp/entry/2014/06/21/102331"&gt;pixyzehn blog:MavericksでPythonのバージョン管理pyenvの設定をしてシステムではなくpyenvのPythonを使う&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;めでたく動きましたとさ！&lt;/p&gt;

&lt;p&gt;とりあえず今回はこれでおしまい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>* 【Python】floatの闇</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/08/25/25171246.html"/>
    <id>http://blog.url.com/blog/2014/08/25/25171246.html</id>
    <published>2014-08-25T17:12:00+09:00</published>
    <updated>2014-10-29T17:57:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;AOJの問題を解いてたら絶対に合ってるのに通らない問題があった。&lt;/p&gt;

&lt;p&gt;正解者のコードを見ていろいろggってるとどうやらPythonのfloatの仕様にしてやられたらしい。&lt;/p&gt;

&lt;p&gt;詳しくまとめてあるサイトがあるので難しい話はそちらでどぞ&lt;/p&gt;

&lt;p&gt;&lt;a title="Python で正確な小数の計算 (3) – float, Decimal の有効桁数" href="http://jutememo.blogspot.jp/2008/09/python-3-float-decimal.html"&gt;Python で正確な小数の計算 (3) – float, Decimal の有効桁数&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まぁ具体的に何が起きたのかというと、例えばインタラクティブシェルで以下のコードを実行する。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.gyazo.com/1dc63ea8a3776faa9901efd7767ad158.png"&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;1 / 3&amp;quot;は無限小数なので省略されてこう表記されてるのだろう。&lt;/p&gt;

&lt;p&gt;しかし、ここでこんなことしてみる。&lt;/p&gt;

&lt;pre class="brush: python; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;print(&amp;#039;%.f100&amp;#039; % (1 / 3))&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;1 / 3&amp;#39;の結果を小数点以下100桁までprintしろって意味。&lt;/p&gt;

&lt;p&gt;するとこうなってる。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.gyazo.com/ef03829c704e094a096402943a1df00d.png"&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;完全に闇wwww&lt;/p&gt;

&lt;p&gt;この仕様のせいで、&amp;rsquo;== 0&amp;#39;がいつまでたっても通らなくて詰んだ。&lt;/p&gt;

&lt;p&gt;int型は大丈夫なんだけど、floatだとこうなることがある。&lt;/p&gt;

&lt;p&gt;ので、floatに対して&amp;rsquo;== 0&amp;#39;を実現したかったらこう書けば良い。&lt;/p&gt;

&lt;pre class="brush: python; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;hoge &amp;lt; 1.e-10&lt;/pre&gt;

&lt;p&gt;こうすると、下11桁以降を無視して判定してくれる。&lt;/p&gt;

&lt;p&gt;以上！&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>* 堀宮が更新されたらYoしてくるアカウント作った(Yo API その２)</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/08/13/13021030.html"/>
    <id>http://blog.url.com/blog/2014/08/13/13021030.html</id>
    <published>2014-08-13T02:10:00+09:00</published>
    <updated>2014-10-29T17:57:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;先日の続きってほどでもないけど、実用的なもん作った。&lt;/p&gt;

&lt;p&gt;私はWebマンガが好きでしょっちゅう読んでいるのだけど週刊誌と違って不定期更新がゆえ、「うわ、一ヶ月前に更新されてたああああああ(:.;゜;Д;゜;.:)」みたいなことがよくある。&lt;/p&gt;

&lt;p&gt;ので私が好きなWebマンガの一つの&lt;code&gt;堀さんと宮村くん&lt;/code&gt;が更新されたらYoがくるアカウントを作った&lt;/p&gt;

&lt;h2&gt;HORIMIYARSS&lt;/h2&gt;

&lt;p&gt;もし通知が欲しかったら&lt;code&gt;HORIMIYARSS&lt;/code&gt;に一回Yoしてくれれば更新されたときにYoが来ます。&lt;/p&gt;

&lt;p&gt;実装はこんな感じ(Webクロール楽しいいいいいいいいい)&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;
#!/usr/bin/ruby

require &amp;#039;open-uri&amp;#039;
require &amp;#039;nokogiri&amp;#039;
require &amp;#039;kconv&amp;#039;
require &amp;#039;net/http&amp;#039;

# 各話の情報をクローリング
url = &amp;quot;http://dka-hero.com/h_01.html&amp;quot;
new = &amp;quot;&amp;quot; # 最新話

# Yo API
yo_url = &amp;#039;http://api.justyo.co/yoall/&amp;#039;
api_token = &amp;#039;hogehoge&amp;#039;

while true do
  html = open(url).read
  doc = Nokogiri::HTML(html.toutf8, nil, &amp;#039;utf-8&amp;#039;)
  episodes = doc.xpath(&amp;#039;//a[@target=&amp;quot;contents&amp;quot;]&amp;#039;)
  title = episodes[-3].inner_text.to_s
  if new == title
    puts &amp;quot;最新話の更新はありません&amp;quot;
  else
    puts &amp;quot;最新話の更新がありました：&amp;quot; + title
    Net::HTTP.post_form(URI.parse(yo_url), {&amp;#039;api_token&amp;#039; =&amp;gt; api_token})
    new = title
  end
  sleep 60 * 30
end

puts &amp;quot;最新話は&amp;quot; + title
&lt;/pre&gt;

&lt;p&gt;これを&lt;/p&gt;

&lt;pre&gt;`nohup ruby yo.rb &amp;amp;
`&lt;/pre&gt;

&lt;p&gt;で、VPSのバックグラウンドプロセスとして回してる。&lt;/p&gt;

&lt;p&gt;おしまい&lt;/p&gt;

&lt;h4&gt;P.S.&lt;/h4&gt;

&lt;p&gt;nohupコマンド、友人から聞いて知ったのだけど(情弱でさーせん…)&lt;/p&gt;

&lt;p&gt;これサーバの再起動とかしたらプロセス死ぬよね？&lt;/p&gt;

&lt;p&gt;サーバの再起動と合わせてプロセス復活するようないい方法あったら知りたい〜&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>* YoのAPIを触ってみる(その１)</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/08/06/06173532.html"/>
    <id>http://blog.url.com/blog/2014/08/06/06173532.html</id>
    <published>2014-08-06T17:35:00+09:00</published>
    <updated>2014-10-29T17:57:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h3&gt;流行りに乗り遅れたYO&lt;/h3&gt;

&lt;p&gt;ちまたで噂のYoのAPIを触ってみた&lt;/p&gt;

&lt;p&gt;とりあえず&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;特定のユーザにYoを送る&lt;/li&gt;
&lt;li&gt;自身を登録してるユーザ全てにYoを送る&lt;/li&gt;
&lt;li&gt;Yoを送ってきた時のログを取る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ところまでやってみた。&lt;/p&gt;

&lt;h3&gt;API Keyを取得する&lt;/h3&gt;

&lt;p&gt;YoのAPIを使いたい場合、API専用のアカウントを作成する必要がある。(2014/08/06現在)&lt;/p&gt;

&lt;p&gt;なので既に作成したアカウントの名前で実装したい場合は一回アカウントを削除しなきゃいけない。&lt;/p&gt;

&lt;p&gt;また、APIアカウントを作るためにYoのアカウントがひとつ、必要となるので注意。&lt;/p&gt;

&lt;p&gt;Signupは以下のページでできる。&lt;/p&gt;

&lt;p&gt;&lt;a title="API Sign up" href="http://developer.justyo.co/"&gt;API Sign up&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;登録するとこんな感じの画面が出てくる。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.sota1235.com/wp-content/uploads/2014/08/スクリーンショット-2014-08-06-17.27.38.png"&gt;&lt;img src="http://blog.sota1235.com/wp-content/uploads/2014/08/スクリーンショット-2014-08-06-17.27.38.png" alt="スクリーンショット 2014-08-06 17.27.38" width="1046" height="495" class="alignnone size-full wp-image-312" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここの&amp;ldquo;見せられないよ！&amp;quot;の部分にAPI Keyが表示される。&lt;/p&gt;

&lt;h3&gt;Yoを送る&lt;/h3&gt;

&lt;p&gt;Yoの送り方は非常にシンプルで、決められたURLにPOSTリクエストを送るだけである。&lt;/p&gt;

&lt;h4&gt;全員に送る&lt;/h4&gt;

&lt;p&gt;自分を登録してるユーザ全てにYoを送る&lt;/p&gt;

&lt;pre&gt;`URL: http://api.justyo.co/yoall/

POST Paramater: api_token={{発行されたAPI Key}}&amp;amp;username={{送りたい相手のユーザ名}}
`&lt;/pre&gt;

&lt;h4&gt;個人に送る&lt;/h4&gt;

&lt;p&gt;個人宛てにYoを送る。&lt;/p&gt;

&lt;pre&gt;`URL: http://api.justyo.co/yoall/

POST Paramater: api_token={{発行されたAPI Key}}&amp;amp;username={{送りたい相手のユーザ名}}
`&lt;/pre&gt;

&lt;h4&gt;Yoを受け取る&lt;/h4&gt;

&lt;p&gt;DeveloperページでCallback URLを登録すると、Yoが来るたびにそのURLがリクエストされる。&lt;/p&gt;

&lt;p&gt;その際、GETパラメータでusernameがくっついてくるので、PHPとかなら&lt;code&gt;$_GET[&amp;quot;username&amp;quot;]&lt;/code&gt;で誰からYoが来たのかが分かる。&lt;/p&gt;

&lt;p&gt;自分でテストするために書いたスクリプトが以下の感じ(必要最低限)。&lt;/p&gt;

&lt;pre class="brush: php; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;&amp;lt;?php

$fp = fopen(&amp;quot;log.txt&amp;quot;, &amp;quot;a&amp;quot;);

if(isset($_GET[&amp;quot;username&amp;quot;])) {
  fwrite($fp, date(&amp;quot;Y/m/d H:i:s&amp;quot;).&amp;quot; &amp;quot;.$_GET[&amp;quot;username&amp;quot;].&amp;quot;\n&amp;quot;);
}

fclose($fp);

?&amp;gt;&lt;/pre&gt;

&lt;p&gt;Yoが送られてきたら、その日付とアカウント名をlog.txtに追記するだけ。&lt;/p&gt;

&lt;p&gt;ここらへんいじくり回せばいろいろと作れそう&lt;/p&gt;

&lt;h3&gt;感想&lt;/h3&gt;

&lt;p&gt;とても簡単。少なくともTwitterより簡単。&lt;/p&gt;

&lt;p&gt;近々、これを作ってページが更新されたらYoが来るようなものを作ろうと思ってる。&lt;/p&gt;

&lt;p&gt;のでまた記事にしようかな〜&lt;/p&gt;

&lt;p&gt;それではこれにて&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>* Mouでシンタックスハイライトしたい</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/08/04/04050828.html"/>
    <id>http://blog.url.com/blog/2014/08/04/04050828.html</id>
    <published>2014-08-04T05:08:00+09:00</published>
    <updated>2014-10-29T17:57:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;課題で使いたいので探したらあった。&lt;/p&gt;

&lt;p&gt;&lt;a title="Gist: gist:4286673" href="https://gist.github.com/davidmatas/4286673"&gt;Gist: gist:4286673&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下のを文章内に追加すればおｋ&lt;/p&gt;

&lt;pre class="brush: html; gutter: true; first-line: 1; highlight: []; html-script: false"&gt;&amp;lt;!-- Highlight syntax for Mou.app, insert at the bottom of the markdown document  --&amp;gt;
 
&amp;lt;script src=&amp;quot;http://yandex.st/highlightjs/7.3/highlight.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://yandex.st/highlightjs/7.3/styles/github.min.css&amp;quot;&amp;gt;
&amp;lt;script&amp;gt;
  hljs.initHighlightingOnLoad();
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;楽しかった。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。&lt;/p&gt;
</content>
  </entry>
</feed>
